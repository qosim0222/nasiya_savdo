generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String     @id @default(ulid())
  fullname String
  username String?
  password String
  phone    String
  isActive Boolean
  balance  Int
  // role     User_Role
  // Partners Partners[]
  // Product  Product[]
  // Contract Contract[]
  // Payment  Payment[]
  // Salary   Salary[]
  // Buy      Buy[]
}

model Partners {
  id       String     @id @default(ulid())
  fullname String
  phone    String
  isActive Boolean
  balance  Int
  role     Partners_Role
  address  String
  userId   String
  // user     User       @relation(fields: [userId], references: [id])
  // Contract Contract[]
  // Payment  Payment[]
  // Buy      Buy[]
}

model Product {
  id         String     @id @default(ulid())
  title      String
  sellPrice  Int
  buyPrice   Int
  quantity   Int
  categoryId String
  units      String
  comment    String?
  isActive   Boolean
  userId     String
  // user       User       @relation(fields: [userId], references: [id])
  // Contract   Contract[]
  // Buy        Buy[]
}

model Category {
  id       String  @id @default(ulid())
  title    String
  time     String
  isActive Boolean
}

model Contract {
  id        String   @id @default(ulid())
  partnerId String
  productId String
  quantity  Int
  sellPrice Int
  time      String
  userId    String
  // user      User     @relation(fields: [userId], references: [id])
  // partner   Partners @relation(fields: [partnerId], references: [id])
  // product   Product  @relation(fields: [productId], references: [id])
  // Return    Return[]
  // Debt      Debt[]
}

model Return {
  id         String   @id @default(ulid())
  contractId String
  isNew      Boolean
  reason     String
  // contract   Contract @relation(fields: [contractId], references: [id])
}

model Debt {
  id         String    @id @default(ulid())
  contractId String
  total      Int
  time       String
  // contract   Contract  @relation(fields: [contractId], references: [id])
  // Payment    Payment[]
}

model Payment {
  id          String   @id @default(ulid())
  partnerId   String
  debtId      String
  userId      String
  amount      Int
  comment     String?
  paymentType String
  type        Type
  // partner     Partners @relation(fields: [partnerId], references: [id])
  // user        User     @relation(fields: [userId], references: [id])
  // debt        Debt     @relation(fields: [debtId], references: [id])
}

model Salary {
  id      String  @id @default(ulid())
  userId  String
  amount  Int
  comment String?
  // user    User    @relation(fields: [userId], references: [id])
}

model Buy {
  id        String   @id @default(ulid())
  userId    String
  partnerId String
  productId String
  quantity  Int
  buyPrice  Int
  comment   String?
  // user      User     @relation(fields: [userId], references: [id])
  // partner   Partners @relation(fields: [partnerId], references: [id])
  // product   Product  @relation(fields: [productId], references: [id])
}

enum User_Role {
  OWNER
  STAFF
}

enum Partners_Role {
  CUSTOMER
  SELLER
}

enum User_Status {
  INACTIVE
  ACTIVE
}

enum Units_Type {
  KG
  DONA
  LITR
  METR
}

enum Payment_Type {
  CASH
  CARD
}

enum Type {
    IN
    OUT
}
